Ques 1:- Leetcode Problem No. : 876 (Middle of the LL)
Ans:-
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//T.C :- O(N/2) = O(N)
//S.C :- O(1)
    ListNode* middleNode(ListNode* head) {
        if(head == NULL or head->next == NULL)
        return head;

        //2 node only in the linked list
        if(head->next->next == NULL)
        return head->next;

        //if fast traverse 'n' metre then slow traverse only 'n/2' metre
        ListNode* fast = head;
        ListNode* slow = head;

        while(fast!=NULL and fast->next!=NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
        
    }
};

Ques 2:- Leetcode Problem No.: 21 (Merge Two Sorted Lists)
Ans :-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1==NULL)
            return list2;
        
        if(list2==NULL)
            return list1;
        
        if(list1->val <= list2->val)
        {
            list1->next = mergeTwoLists(list1->next, list2);
            return list1;
        }
        else if(list1->val >= list2->val)/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        //empty list
        if(head == NULL)
        return NULL;

        //non-empty list
        ListNode* curr = head;
        while(curr->next != NULL)
        {
            if(curr->val == curr->next->val)
            {
                ListNode* next = curr->next->next;
                ListNode* delete_node = curr->next;
                delete(delete_node);
                curr->next = next;
            }
            else
            {
                curr = curr->next;
            }
        }
        return head;


    }
};
        {
            list2->next = mergeTwoLists(list1, list2->next);
        }
        return list2;
    }
};

Ques 3:- Leetcode Problem No.: 83 (Remove Duplicate From Sorted Lists)
Ans:-


